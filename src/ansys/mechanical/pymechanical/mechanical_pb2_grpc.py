# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ansys.mechanical.pymechanical import mechanical_pb2 as mechanical__pb2


class MechanicalServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RunJScript = channel.unary_unary(
            "/MechanicalService/RunJScript",
            request_serializer=mechanical__pb2.RunScriptRequest.SerializeToString,
            response_deserializer=mechanical__pb2.RunScriptResponse.FromString,
        )
        self.RunPythonScript = channel.unary_unary(
            "/MechanicalService/RunPythonScript",
            request_serializer=mechanical__pb2.RunScriptRequest.SerializeToString,
            response_deserializer=mechanical__pb2.RunScriptResponse.FromString,
        )
        self.Shutdown = channel.unary_unary(
            "/MechanicalService/Shutdown",
            request_serializer=mechanical__pb2.ShutdowntRequest.SerializeToString,
            response_deserializer=mechanical__pb2.ShutdowntResponse.FromString,
        )


class MechanicalServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RunJScript(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RunPythonScript(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Shutdown(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_MechanicalServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "RunJScript": grpc.unary_unary_rpc_method_handler(
            servicer.RunJScript,
            request_deserializer=mechanical__pb2.RunScriptRequest.FromString,
            response_serializer=mechanical__pb2.RunScriptResponse.SerializeToString,
        ),
        "RunPythonScript": grpc.unary_unary_rpc_method_handler(
            servicer.RunPythonScript,
            request_deserializer=mechanical__pb2.RunScriptRequest.FromString,
            response_serializer=mechanical__pb2.RunScriptResponse.SerializeToString,
        ),
        "Shutdown": grpc.unary_unary_rpc_method_handler(
            servicer.Shutdown,
            request_deserializer=mechanical__pb2.ShutdowntRequest.FromString,
            response_serializer=mechanical__pb2.ShutdowntResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("MechanicalService", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class MechanicalService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RunJScript(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/MechanicalService/RunJScript",
            mechanical__pb2.RunScriptRequest.SerializeToString,
            mechanical__pb2.RunScriptResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def RunPythonScript(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/MechanicalService/RunPythonScript",
            mechanical__pb2.RunScriptRequest.SerializeToString,
            mechanical__pb2.RunScriptResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Shutdown(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/MechanicalService/Shutdown",
            mechanical__pb2.ShutdowntRequest.SerializeToString,
            mechanical__pb2.ShutdowntResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
